var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const CreateQuestionMap_1 = require("./scripts/CreateQuestionMap");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("scripts/CreateQuestionMap.ts", CreateQuestionMap_1.default);
    }
}
GameConfig.width = 1920;
GameConfig.height = 1080;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "middle";
GameConfig.alignH = "center";
GameConfig.startScene = "SetQuestionWindow.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{"./scripts/CreateQuestionMap":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        // Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
}
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CreateQuestionMap extends Laya.Script {
    constructor() {
        super();
        this.questionItem = null;
        /**
         * @prop {name:questionItem,tips:预制体,type:Prefab,default:null}
         */
        this.questionItem = null;
    }
    onAwake() {
        super.onAwake();
        this.createMap(4);
    }
    createMap(circleCount) {
        let centerX = Laya.stage.width / 2 - 74 / 2;
        let centerY = Laya.stage.height / 2 - 64 / 2;
        //生成中心块
        this.createItem(centerX, centerY);
        //生成外圈块
        for (let i = 1; i <= circleCount; i++) {
            let sideCount = i + 1;
            // 先创建两边的块
            for (let j = 0; j < sideCount; j++) {
                let leftOffsetX = centerX - i * 55;
                let rightOffsetX = centerX + i * 55;
                let offsetY = centerY - 32 * i + j * 64;
                this.createItem(leftOffsetX, offsetY);
                this.createItem(rightOffsetX, offsetY);
            }
            //创建上面和下面的块
            let topItem = this.questionItem.create();
            let bottomItem = this.questionItem.create();
            this.createItem(centerX, centerY - 64 * i);
            this.createItem(centerX, centerY + 64 * i);
            // 左上，左下，右上，右下
            for (let j = 0; j < i - 1; j++) {
                // 左上
                let leftX = centerX - 55.5 * (i - 1 - j);
                let leftTopY = centerY - 32 * (i + 1 + j);
                this.createItem(leftX, leftTopY);
                // 左下
                let leftBomY = centerY + 32 * (i + 1 + j);
                this.createItem(leftX, leftBomY);
                // 右上
                let rightX = centerX + 55.5 * (i - 1 - j);
                let rightTopY = centerY - 32 * (i + 1 + j);
                this.createItem(rightX, rightTopY);
                // 右下
                let rightBomY = centerY + 32 * (i + 1 + j);
                this.createItem(rightX, rightBomY);
            }
        }
    }
    createItem(x, y) {
        let item = this.questionItem.create();
        item.pos(x, y);
        this.owner.addChild(item);
    }
}
exports.default = CreateQuestionMap;
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
